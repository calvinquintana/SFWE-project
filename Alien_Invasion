import sys
from time import sleep

import pygame

from settings import Settings
from game_stats import GameStats
from ship import Ship
from bullets import Bullet
from alien import Alien


class AlienInvasion:
    #Overall class to manage game assets and behavior

    def __init__(self):
        #Initialize the game, and create game resources

        pygame.init()
        self.settings = Settings()

        self.screen = pygame.display.set_mode ((0, 0), pygame.FULLSCREEN)
        self.settings.screen_width = self.screen.get_rect().width
        self.settings.screen_height = self.screen.get_rect().height

        pygame.display.set_caption ("Calvin's Alien Invasion")

        self.stats = GameStats(self)

        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()

        #Add in aliens.
        self.aliens = pygame.sprite.Group()
        self._create_fleet()

    def run_game(self):
        #Start the main loop for game

        while True:
            #Call a method to check to see if any keyboard events have occurred
            self._check_events()
            #Check to see if the game is still active
            if self.stats.game_active:
                self.ship.update()
                self._update_bullets()
                self._update_aliens()
            self._update_screen()

    def _check_events(self):
        #Respond to keypresses and mouse events
            #Did the player quit the game?
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            #Did the player press a key?
            elif event.type ==pygame.KEYDOWN:
                self._check_keydown_events(event)
            #Did the player stop holding down the arrow keys?
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)

    def _check_keydown_events(self, event):
        #Is the key the right arrow or is it the left arrow?
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = True
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = True
        #Did the player hit the Q key to quite the game?
        elif event.key == pygame.K_q:
            sys.exit()
        #Did the player hit the space bar to shoot bullet?
        elif event.key == pygame.K_SPACE:
           self._fire_bullet() 

    def _check_keyup_events(self, event):
        #Did the player stop holding down the arrow keys?
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = False

    def _fire_bullet(self):
        #Create a new bullet and add it to the bullets group.
        #Limit the number of bullets a player can have at a time by adding constant to the settings file
        if len(self.bullets) < self.settings.bullets_allowed:
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet)

    def _update_bullets(self):
        #Update positions of the bullets and get rid of old bullets.
        self.bullets.update()

        #Get rid of bullets that have disappeared off the screen because they are still there in the game and take up memory and execution time.
        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                self.bullets.remove(bullet)

        self._check_bullet_alien_collisions()

    def _check_bullet_alien_collisions(self):
        #Respond to bullet-alien collisions
        #Check for any bullets that have hit aliens. If so, get rid of buller and alien.
        collisions = pygame.sprite.groupcollide(self.bullets, self.aliens, True, True)
        if collisions:
            for aliens in collisions.values():
                self.stats.aliens_destroyed += len(aliens)#Check to see if the aliens group is empty and if so, create a new fleet.
        if not self.aliens:
            #Destroy any existing bullets and create new fleet
            self.bullets.empty()
            self._create_fleet()

    def _update_aliens(self):
        #Update the position of all aliens in the fleet
        #Check if the fleet is at an edge then update the position of all aliens in the fleet
        self._check_fleet_edges()
        self.aliens.update()

        if pygame.sprite.spritecollideany(self.ship, self.aliens):
            print('SHIP HIT!!!')
            self._ship_hit()

        self._check_aliens_bottom()

    def _create_fleet(self):
        #Make a single alien
        aliens = Alien(self)
        alien_width, alien_height = aliens.rect.size
        #Determine how much space you have on screen for aliens
        available_space_x = self.settings.screen_width - (2 * alien_width)
        number_aliens_x = available_space_x // (2 * alien_width)

        #Determine the number of rows of aliens that fit on screen
        ship_height = self.ship.rect.height
        available_space_y = (self.settings.screen_height - (3 * alien_height) - ship_height)
        number_rows = available_space_y // (2 * alien_height)

        #Create the full fleet of aliens
        for row_number in range (number_rows):
            for alien_number in range (number_aliens_x):
                self._create_alien(alien_number, row_number)

    def _create_alien(self, alien_number, row_number):
        #Create an alien and place it  in the row.
        aliens = Alien(self)
        alien_width, alien_height = aliens.rect.size
        alien_width = aliens.rect.width
        aliens.x = alien_width + 2 * alien_width * alien_number
        aliens.rect.x = aliens.x
        aliens.rect.y = alien_height + 2 * aliens.rect.height * row_number
        self.aliens.add(aliens)

    def _check_fleet_edges(self):
        #Respond appropriately if any aliens have reached the edge
        for alien in self.aliens.sprites():
            if alien.check_edges():
                self._change_fleet_direction()
                break

    def _change_fleet_direction(self):
        #Drop the entire fleet and change the fleet's direction
        for alien in self.aliens.sprites():
            alien.rect.y += self.settings.fleet_drop_speed
        self.settings.fleet_direction *= -1

    def _ship_hit(self):

        if self.stats.ships_left > 0:
            self.stats.ships_left -= 1

            self.aliens.empty()
            self.bullets.empty()

            self._create_fleet()
            self.ship.center_ship()

            sleep (0.5)
        else:
            self.stats.game_active = False

    def _check_aliens_bottom(self):
        screen_rect = self.screen.get_rect()
        for alien in self.aliens.sprites():
            if alien.rect.bottom >= screen_rect.bottom:
                self._ship_hit()
                break


    def _update_screen(self):
        #Update images on the screen, and flip to the new screen.
        #Redraw the screen each pass through the loop
        self.screen.fill(self.settings.bg_color)
        self.ship.blitme()
        #Draw bullets on the screen
        for bullet in self.bullets.sprites():
            bullet.draw_bullet()
        #Draw an alien
        self.aliens.draw(self.screen)

        font = pygame.font.SysFont(None, 48)
        ships_left_text = font.render(f'Ships: {self.stats.ships_left}', True, (170, 60, 2))
        aliens_destroyed_text = font.render(f'Aliens Destroyed: {self.stats.aliens_destroyed}', True, (170, 60, 2))

        self.screen.blit(ships_left_text, (10, 10))
        self.screen.blit(aliens_destroyed_text, (10, 50))

        pygame.display.flip()



if __name__ == '__main__':
    #Make a game instance, and run the game
    ai = AlienInvasion()
    ai.run_game()

quit()
